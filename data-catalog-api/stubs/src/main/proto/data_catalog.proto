// Licensed to the Apache Software Foundation (ASF) under one
// or more contributor license agreements.  See the NOTICE file
// distributed with this work for additional information
// regarding copyright ownership.  The ASF licenses this file
// to you under the Apache License, Version 2.0 (the
// "License"); you may not use this file except in compliance
// with the License.  You may obtain a copy of the License at

//   http://www.apache.org/licenses/LICENSE-2.0

// Unless required by applicable law or agreed to in writing,
// software distributed under the License is distributed on an
// "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
// KIND, either express or implied.  See the License for the
// specific language governing permissions and limitations
// under the License.

syntax = "proto3";

option java_multiple_files = true;
option java_package = "org.apache.airavata.datacatalog.api";

message UserInfo {
    /*
     * This is an external identifier for the user, which identifies the user in
     * whatever user management scheme data catalog is integrated with.
     */
    string user_id = 1;
    /*
     * This is an (optional) external identifier for the tenant, which
     * identifies the tenant in whatever tenant management scheme data catalog
     * is integrated with.
     */
    optional string tenant_id = 2;
    repeated string group_ids = 3;
}

message GroupInfo {
    /*
     * This is an external identifier for the group, which identifies the group in
     * whatever group management scheme data catalog is integrated with.
     */
    string group_id = 1;
    /*
     * This is an (optional) external identifier for the tenant, which
     * identifies the tenant in whatever tenant management scheme data catalog
     * is integrated with.
     */
    optional string tenant_id = 2;
}

enum Permission {
    OWNER = 0;
    READ = 1;
    READ_METADATA = 2;
    WRITE = 3;
    WRITE_METADATA = 4;
    MANAGE_SHARING = 5;
}

message DataProduct {
    string data_product_id = 1;
    optional string parent_data_product_id = 2;
    string name = 3;
    optional string metadata = 4;
    repeated string metadata_schemas = 5;
    UserInfo owner = 6;
}

enum FieldValueType {
    STRING = 0;
    INTEGER = 1;
    FLOAT = 2;
    BOOLEAN = 3;
    DATESTRING = 4;
}
message MetadataSchema {
    string schema_name = 1;
}
message MetadataSchemaField {
    string schema_name = 1;
    string field_name = 2;
    string json_path = 3;
    FieldValueType value_type = 4;
}

message DataProductCreateRequest {
    UserInfo user_info = 1;
    DataProduct data_product = 2;
}
message DataProductCreateResponse {
    DataProduct data_product = 1;
}
message DataProductUpdateRequest {
    UserInfo user_info = 1;
    DataProduct data_product = 2;
}
message DataProductUpdateResponse {
    DataProduct data_product = 1;
}
message DataProductGetRequest {
    UserInfo user_info = 1;
    string data_product_id = 2;
}
message DataProductGetResponse {
    DataProduct data_product = 1;
}
message DataProductDeleteRequest {
    UserInfo user_info = 1;
    string data_product_id = 2;
}
message DataProductDeleteResponse {
}
message DataProductAddToMetadataSchemaRequest {
    UserInfo user_info = 1;
    string data_product_id = 2;
    string schema_name = 3;
}
message DataProductAddToMetadataSchemaResponse {
    DataProduct data_product = 1;
}
message DataProductRemoveFromMetadataSchemaRequest {
    UserInfo user_info = 1;
    string data_product_id = 2;
    string schema_name = 3;
}
message DataProductRemoveFromMetadataSchemaResponse {
    DataProduct data_product = 1;
}
message DataProductSearchRequest {
    UserInfo user_info = 1;
    string sql = 2;
    int32 page = 3;
    int32 page_size = 4;
    

}
message DataProductSearchResponse {
    repeated DataProduct data_products = 1;
    int32 total_count = 2;
}


message MetadataSchemaGetRequest {
    UserInfo user_info = 1;
    string schema_name = 2;
}
message MetadataSchemaGetResponse {
    MetadataSchema metadata_schema = 1;
}
message MetadataSchemaListRequest {
    UserInfo user_info = 1;
}
message MetadataSchemaListResponse {
    repeated MetadataSchema metadata_schemas = 1;
}
message MetadataSchemaCreateRequest {
    UserInfo user_info = 1;
    MetadataSchema metadata_schema = 2;
}
message MetadataSchemaCreateResponse {
    MetadataSchema metadata_schema = 1;
}
message MetadataSchemaDeleteRequest {
    UserInfo user_info = 1;
    MetadataSchema metadata_schema = 2;
}
message MetadataSchemaDeleteResponse {
}
message MetadataSchemaFieldGetRequest {
    UserInfo user_info = 1;
    string schema_name = 2;
    string field_name = 3;
}
message MetadataSchemaFieldGetResponse {
    MetadataSchemaField metadata_schema_field = 1;
}
message MetadataSchemaFieldCreateRequest {
    UserInfo user_info = 1;
    MetadataSchemaField metadata_schema_field = 2;
}
message MetadataSchemaFieldCreateResponse {
    MetadataSchemaField metadata_schema_field = 1;
}
message MetadataSchemaFieldUpdateRequest {
    UserInfo user_info = 1;
    MetadataSchemaField metadata_schema_field = 2;
}
message MetadataSchemaFieldUpdateResponse {
    MetadataSchemaField metadata_schema_field = 1;
}
message MetadataSchemaFieldDeleteRequest {
    UserInfo user_info = 1;
    MetadataSchemaField metadata_schema_field = 2;
}
message MetadataSchemaFieldDeleteResponse {
}
message MetadataSchemaFieldListRequest {
    UserInfo user_info = 1;
    string schema_name = 2;
}
message MetadataSchemaFieldListResponse {
    repeated MetadataSchemaField metadata_schema_fields = 1;
}

service DataCatalogAPIService {
    rpc createDataProduct(DataProductCreateRequest) returns (DataProductCreateResponse){}
    rpc updateDataProduct(DataProductUpdateRequest) returns (DataProductUpdateResponse){}
    rpc getDataProduct(DataProductGetRequest) returns (DataProductGetResponse){}
    rpc deleteDataProduct(DataProductDeleteRequest) returns (DataProductDeleteResponse){}
    rpc getMetadataSchema(MetadataSchemaGetRequest) returns (MetadataSchemaGetResponse){}
    rpc createMetadataSchema(MetadataSchemaCreateRequest) returns (MetadataSchemaCreateResponse){}
    rpc deleteMetadataSchema(MetadataSchemaDeleteRequest) returns (MetadataSchemaDeleteResponse){}
    rpc getMetadataSchemas(MetadataSchemaListRequest) returns (MetadataSchemaListResponse){}
    rpc getMetadataSchemaField(MetadataSchemaFieldGetRequest) returns (MetadataSchemaFieldGetResponse){}
    rpc createMetadataSchemaField(MetadataSchemaFieldCreateRequest) returns (MetadataSchemaFieldCreateResponse){}
    rpc updateMetadataSchemaField(MetadataSchemaFieldUpdateRequest) returns (MetadataSchemaFieldUpdateResponse){}
    rpc deleteMetadataSchemaField(MetadataSchemaFieldDeleteRequest) returns (MetadataSchemaFieldDeleteResponse){}
    rpc getMetadataSchemaFields(MetadataSchemaFieldListRequest) returns (MetadataSchemaFieldListResponse){}
    rpc addDataProductToMetadataSchema(DataProductAddToMetadataSchemaRequest) returns (DataProductAddToMetadataSchemaResponse){}
    rpc removeDataProductFromMetadataSchema(DataProductRemoveFromMetadataSchemaRequest) returns (DataProductRemoveFromMetadataSchemaResponse){}
    rpc searchDataProducts(DataProductSearchRequest) returns (DataProductSearchResponse){}

    rpc GrantPermissionToUser (GrantPermissionToUserRequest) returns (GrantPermissionToUserResponse) {}
    rpc GrantPermissionToGroup (GrantPermissionToGroupRequest) returns (GrantPermissionToGroupResponse) {}
}
message GrantPermissionToUserRequest {
    UserInfo user_info = 1;    // current user
    UserInfo target_user = 2;
    string data_product_id = 3;
    Permission permission = 4;
}
message GrantPermissionToUserResponse {}

message GrantPermissionToGroupRequest {
    UserInfo user_info = 1;
    GroupInfo target_group = 2;
    string data_product_id = 3;
    Permission permission = 4;
}
message GrantPermissionToGroupResponse {}