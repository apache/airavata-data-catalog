/*
 * Licensed to the Apache Software Foundation (ASF) under one or more
 * contributor license agreements.  See the NOTICE file distributed with
 * this work for additional information regarding copyright ownership.
 * The ASF licenses this file to You under the Apache License, Version 2.0
 * (the "License"); you may not use this file except in compliance with
 * the License.  You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

syntax = "proto3";

option java_multiple_files = true;
package org.apache.airavata.replicacatalog.secret.stubs.common;

import "secret/S3Credential.proto";
import "secret/FTPCredential.proto";
import "secret/GCSCredential.proto";
import "catalogapi/ReplicaCatalogAPI.proto";

//enum StorageType {
//    S3 = 0;
//    SCP = 1;
//    FTP = 2;
//    LOCAL = 3;
//    BOX = 4;
//    DROPBOX = 5;
//    GCS = 6;
//    AZURE = 7;
//    SWIFT = 8;
//    ODATA = 9;
//}

enum Error {
    NOT_FOUND = 0;
    NO_PERMISSION = 1;
    LIMIT_OVERFLOWED = 2;
}
//
//message StorageTypeResolveRequest {
//    string secret_id = 1;
//}
//
//message StorageTypeResolveResponse {
//    string secret_id = 1;
//    StorageType storage_type = 2;
//    Error error = 3;
//}

message StorageSecret {
    string secret_id = 1;
    StorageType storage_type = 2;
    SecretWrapper secret = 3;
    Error error = 4;
}

message SecretWrapper {
    oneof secret {
      org.apache.airavata.replicacatalog.secret.stubs.s3.S3Secret s3Secret = 1;
      org.apache.airavata.replicacatalog.secret.stubs.gcs.GCSSecret gcsSecret = 2;
      org.apache.airavata.replicacatalog.secret.stubs.ftp.FTPSecret ftpSecret = 3;

    }
}

message SecretCreateRequest {
    StorageSecret secret = 1;
}

message SecretGetRequest {
    string secret_id = 1;
    StorageType storage_type = 2;
}

message SecretDeleteRequest {
    string secret_id = 1;
    StorageType storage_type = 2;
}

message SecretDeleteResponse {
    bool status = 1;
}

message SecretListEntry {
    string storage_id = 1;
    string storage_name = 2;
    StorageType storage_type = 3;
}

message SecretListResponse {
    repeated SecretListEntry secret_list = 1;
}

message SecretListRequest {
    int32 page_number = 1;
    int32 page_size = 2;
}

message SecretSearchRequest {
    oneof searchQuery {
        string secret_id = 1;
        StorageType storage_type = 2;
    }
}

/*
 * Replica storage secret related services
 */
service SecretCommonService {
//    rpc resolveStorageType (StorageTypeResolveRequest) returns (StorageTypeResolveResponse);  // Get secret type
    rpc registerSecret (SecretCreateRequest) returns (StorageSecret);           // Add new secret to replica catalog
    rpc getSecret (SecretGetRequest) returns (StorageSecret);                   // Get secret using secret Id (Secret Id can retrieve from the replica ID using replica storage id-secret id linking (StorageSecretEntity))
    rpc deleteSecrets (SecretDeleteRequest) returns (SecretDeleteResponse);     // Delete secret suing secret ID
    rpc searchSecrets (SecretSearchRequest) returns (SecretListResponse);       // Search secrets using secret Id or the secret type
    rpc listSecrets (SecretListRequest) returns (SecretListResponse);           // List all the secrets
}